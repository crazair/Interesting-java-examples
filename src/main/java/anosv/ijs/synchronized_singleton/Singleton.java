package anosv.ijs.synchronized_singleton;

/*
* Синхронизация
*
* У этого варианта есть только один недостаток.
* Синхронизация полезна только один раз, при первом обращении к getInstance(), после этого каждый раз,
* при обращении этому методу, синхронизация просто забирает время. Что можно сказать по этому поводу?
* Ну, во-первых, если вызов getInstance() не происходит достаточно часто (что значит «достаточно часто» решать вам),
* то этот метод имеет преимущество перед остальными – прост, понятен, лениво инициализируется,
* дает возможность обрабатывать исключительные ситуации в конструкторе. А во-вторых, синхронизация в Java
* перестала быть обременительно медленной настолько, насколько ее боятся. Ну что еще для счастья надо?
*/
public class Singleton {

    private static Singleton instance;

    private Singleton() {
    }

    public static synchronized Singleton getInstance() {
        if(instance == null){
            instance = new Singleton();
        }
        return instance;
    }
}
